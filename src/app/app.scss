/**
 * http://ionicframework.com/docs/theming/
 * App Global Sass
 * --------------------------------------------------
 * Put style rules here that you want to apply globally. These
 * styles are for the entire app and not just one component.
 * Additionally, this file can be also used as an entry point
 * to import other Sass files to be included in the output CSS.
 *
 * Shared Sass variables, which can be used to adjust Ionic's
 * default Sass variables, belong in "theme/variables.scss".
 *
 * To declare rules for a specific mode, create a child rule
 * for the .md, .ios, or .wp mode classes. The mode class is
 * automatically applied to the <body> element in the app.
 */

/**
 * Global styles
 * -------------
 * Styles that are applied throughout the app
 */

.bip-button {
  font-size: 1.6rem;
  pointer-events: all;
  padding: 12px ($globalSpacing * 2);
  border-radius: 12px;
  color: bipColor('light');
  margin: $globalSpacing 0;
  @include buttonType('navigation', 'primary');
  @include buttonType('positive-action', 'secondary');
  @include buttonType('negative-action', 'danger');
  @include buttonType('specific-action', 'warning');
  &.small {
    font-size: 1.3rem;
    padding: calc(#{$globalSpacing} / 2);
    border-radius: 8px;
  }
}

h1 {
  font-size: 1.8rem;
  color: bipColor('dark');
  font-weight: initial;
}

.theme-title {
  font-size: 1.4rem;
  font-weight: initial;
}

h3 {
  font-size: 1.4rem;
  color: bipColor('dark');
  font-weight: bold;
}

p {
  color: $textDefaultColor;
}

ion-content[background] {
  background-color: $lightGrey;
  .content-card {
    background-color: white;
    padding: $globalSpacing;
    border-radius: 8px;
    box-shadow: 0 0 8px 1px rgba(0, 0, 0, 0.06);
  }
}

ion-header.gradient {
  @include bipGradient(-90deg);
  * {
    color: bipColor('light') !important;
  }
  .toolbar-background {
    background-color: inherit;
  }
}

.active {
  background-color: $lightGrey;
  bip-menu-item-icon {
    @include smoothShadow;
  }
}

.toolbar {
  &[class*="toolbar-"] {
    & button {
      color: bipColor('boreal');
    }
  }
}

.fab {
  bip-icon {
    font-size: 24px;
  }
}

.fab-wp {
  bip-icon {
    svg {
      top: 0.05em;
    }
  }
}

.fab[mini] {
  bip-icon {
    font-size: 18px;
  }
}

ion-menu {
  .close-menu-button {
    z-index: 2;
    position: absolute;
    right: 0;
    font-size: 18px;
    background-color: transparent;
    color: bipColor('dark');
    box-shadow: none;
    &.activated {
      background-color: rgba(0, 0, 0, .05);
      box-shadow: none;
    }
  }
  [ion-fixed] {
    width: 100%;
  }
  .scroll-content {
    top: 278px;
  }
}

.menu-item-list {
  font-size: 16px;
  bip-menu-item {
    border-bottom: 1px solid $lightGrey;
  }
  bip-menu-item:last-child {
    border-bottom: none;
  }
}

.multiline-fade {
  &::after {
    content: '';
    height: 1.2em;
    width: 100%;
    background: linear-gradient(90deg, transparentize(bipColor('light'), 1) 0%, bipColor('light') 90%);
    position: absolute;
    bottom: 0;
    right: 0;
  }
}

ion-app.md .multiline-fade,
ion-app.ios .multiline-fade {
  $textHeight: 1.2em;
  line-height: $textHeight;
  height: calc(3 * #{$textHeight});
}

ion-app.wp .multiline-fade {
  $textHeight: 1.35em;
  line-height: $textHeight;
  height: calc(3 * #{$textHeight});
}

.img-wrapper {
  margin-left: -#{$globalSpacing};
  margin-right: -#{$globalSpacing};
  overflow: hidden;
  &.cover {
    margin-top: -#{$globalSpacing};
    margin-bottom: $globalSpacing;
  }
  img {
    object-fit: cover;
    width: 100%;
    height: 100%;
    object-position: bottom;
  }
}

.title-bar {
  display: flex;
  justify-content: space-between;
  padding-bottom: $globalSpacing;
  border-bottom: 0.5px solid rgba(177, 177, 177, 0.5);
  margin-bottom: $globalSpacing;
}

.form-input {
  margin-bottom: $globalSpacing;
  label,
  input {
    display: block;
  }
  label {
    margin-bottom: calc(#{$globalSpacing}/2);
  }
  input {
    height: 38px;
    width: 100%;
    padding: calc(#{$globalSpacing} /2);
    border-radius: 12px;
    border: 0.5px solid $textDefaultColor;
    &::placeholder {
      color: transparentize($textDefaultColor, 0.25);
    }
  }
}

.ng-valid:not(form) {
  border-color: bipColor('secondary');
}

.ng-invalid:not(form):not(.ng-pristine),
.ng-invalid.ng-touched:not(form) {
  border-color: bipColor('danger');
}

@media only screen and (orientation: portrait) {
  .img-wrapper.cover {
    height: 45vw;
  }
}

@media only screen and (orientation: landscape) {
  .img-wrapper.cover {
    height: 40vh;
  }
}

/**
 * iOS Only Styles
 * ---------------
 * Styles that should only apply when the app is run on an iOS device.
 */

.ios ion-menu>.menu-inner>ion-content.statusbar-padding:first-child .fixed-content {
  padding-top: 20px;
}

/**
 * Background color
 * ----------------
 * Generates classes that applies the $colors to the `background-color` property.
 */

// Main colors
@each $colorName,
$hexValue in $colors {
  .#{$colorName}-bg-color {
    background-color: $hexValue;
  }
}

// Secondary colors
@each $colorName,
$hexValue in $secondaryColors {
  .#{$colorName}-bg-color {
    background-color: $hexValue;
  }
}

/**
 * Foreground color
 * ----------------
 * Generates classes that applies the $colors to the `color` property.
 */

// Main colors
@each $colorName,
$hexValue in $colors {
  .#{$colorName}-color {
    color: $hexValue;
  }
}

// Secondary colors
@each $colorName,
$hexValue in $secondaryColors {
  .#{$colorName}-color {
    color: $hexValue;
  }
}

/**
 * Outline color
 * ----------------
 * Generates classes that applies the $colors as a border.
 */

// Main colors
@each $colorName,
$hexValue in $colors {
  .#{$colorName}-outline {
    border: solid .5px $hexValue;
    background-color: white;
    color: bipColor('#{$colorName}');
  }
}

// Secondary colors
@each $colorName,
$hexValue in $secondaryColors {
  .#{$colorName}-outline {
    border: solid .5px $hexValue;
    background-color: white;
    color: bipColor('#{$colorName}');
  }
}